<!DOCTYPE html>
<html lang="en">
<head>
	<title>Car-Test</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link type="text/css" rel="stylesheet" href="main.css">
</head>

<body>

<script type="x-shader/x-vertex" id="vertexShader">
			varying vec3 vWorldPosition;
			void main() {
				vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
				vWorldPosition = worldPosition.xyz;
				gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
			}
		</script>

<script type="x-shader/x-fragment" id="fragmentShader">
			uniform vec3 topColor;
			uniform vec3 bottomColor;
			uniform float offset;
			uniform float exponent;
			varying vec3 vWorldPosition;
			void main() {
				float h = normalize( vWorldPosition + offset ).y;
				gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) ), 1.0 );
			}
		</script>

<script type="module">
    import * as THREE from '../config/three.module.js';

    import Stats from './jsm/libs/stats.module.js';

    import { OrbitControls } from './jsm/controls/OrbitControls.js';
    import { DDSLoader } from './jsm/loaders/DDSLoader.js';
    import { MTLLoader } from './jsm/loaders/MTLLoader.js';
    import { OBJLoader } from './jsm/loaders/OBJLoader.js';
    import { DRACOLoader } from './jsm/loaders/DRACOLoader.js';

    var SCREEN_WIDTH = window.innerWidth;
    var SCREEN_HEIGHT = window.innerHeight;
    var container, stats;
    var camera, scene, renderer,light;
    var dracoLoader = new DRACOLoader();
    dracoLoader.setDecoderPath( 'js/libs/draco/' );
    dracoLoader.setDecoderConfig( { type: 'js' } );
    init();
    animate();
    function init() {
        container = document.createElement( 'div' );
        document.body.appendChild( container );
        // CAMERA
        camera = new THREE.PerspectiveCamera( 80, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000 );
        camera.position.set( 400, 100, 300);
        // SCENE
        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xcce0ff );
        scene.fog = new THREE.Fog( 0xcce0ff, 500, 10000 );
        // LIGHTS
        light = new THREE.HemisphereLight( 0xffffff, 0x444444 );
        light.position.set( 0, 200, 0 );
        scene.add( light );
        light = new THREE.DirectionalLight( 0xaabbff, 2 );
        light.position.set( 0, 200, 200 );
        light.castShadow = true;
        light.shadow.camera.top = 180;
        light.shadow.camera.bottom = - 100;
        light.shadow.camera.left = - 120;
        light.shadow.camera.right = 120;
        scene.add( light );
        // SKYDOME
        // var vertexShader = document.getElementById( 'vertexShader' ).textContent;
        // var fragmentShader = document.getElementById( 'fragmentShader' ).textContent;
        // var uniforms = {
        //     topColor: { value: new THREE.Color( 0x0077ff ) },
        //     bottomColor: { value: new THREE.Color( 0xffffff ) },
        //     offset: { value: 400 },
        //     exponent: { value: 0.6 }
        // };
        // uniforms.topColor.value.copy( light.color );
        // var skyGeo = new THREE.SphereBufferGeometry( 1000, 32, 15 );
        // var skyMat = new THREE.ShaderMaterial( {
        //     uniforms: uniforms,
        //     vertexShader: vertexShader,
        //     fragmentShader: fragmentShader,
        //     side: THREE.BackSide
        // } );
        // var sky = new THREE.Mesh( skyGeo, skyMat );
        // scene.add( sky );
        // RENDERER
        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( SCREEN_WIDTH, SCREEN_HEIGHT );
        container.appendChild( renderer.domElement );
        renderer.gammaInput = true;
        renderer.gammaOutput = true;
        // CONTROLS
        var controls = new OrbitControls( camera, renderer.domElement );
        controls.minPolarAngle =0.5;
        controls.maxPolarAngle = Math.PI * 0.5;
        controls.enableZoom = true;
        // STATS
        stats = new Stats();
        container.appendChild( stats.dom );
        // MODEL
        dracoLoader.load( 'models/draco/cheshen.drc', function ( geometry ) {
            geometry.computeVertexNormals();
            var material = new THREE.MeshStandardMaterial( { color: 0x606060 } );
            var mesh = new THREE.Mesh( geometry, material );

            scene.add( mesh );
            // Release decoder resources.
            dracoLoader.dispose();
        } );
        window.addEventListener( 'resize', onWindowResize, false );
    }
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }
    //
    function animate() {
        requestAnimationFrame( animate );
        renderer.render( scene, camera );
        stats.update();
    }
</script>

</body>

</html>
